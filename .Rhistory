#w[ct,] = c(x[i], y[j], z[i,j], x[i] / y[j])
ct = ct + 1
}
}
filled.contour(x=x, y=y, z=z,
xlab = expression(beta),
ylab = expression(gamma),
color.palette = terrain.colors,
plot.axes = {
points(table[2,2], table[2,3], pch = 19)
axis(1, seq(0, .5, length.out = 6))
axis(2, seq(0, .5, length.out = 6))
points(region, pch = 19, cex = .5)
})
title(main = "50% Reporting")
ratio = region[,1] / region[,2]
table[2,5] = min(ratio)
table[2,6] = max(ratio)
View(table)
# latex table
stargazer(table)
N = c(10000,25000,50000,100000)
k = 2 # which N
eta = c(.5, .2, .1)
table = matrix(0, 4, 6)
colnames(table) = c("eta","beta","gamma","R","Ra","Rb")
# 100% reporting
table[,1] = c(1, eta)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=r,
N=N[k],
hessian = T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[1,2:3] = out$estimate
table[1,4] = table[1,2] / table[1,3]
ratio = region[,1] / region[,2]
table[1,5] = min(ratio)
table[1,6] = max(ratio)
# 50% reporting
rp = rpseudor(r, eta[1])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian = T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[2,2:3] = out$estimate
table[2,4] = table[2,2] / table[2,3]
ratio = region[,1] / region[,2]
table[2,5] = min(ratio)
table[2,6] = max(ratio)
# 20% reporting
rp = rpseudor(r, eta[2])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian=T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[3,2:3] = out$estimate
table[3,4] = table[3,2] / table[3,3]
ratio = region[,1] / region[,2]
table[3,5] = min(ratio)
table[3,6] = max(ratio)
# 10% Reporting
rp = rpseudor(r, eta[3])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian=T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[4,2:3] = out$estimate
table[4,4] = table[4,2] / table[4,3]
ratio = region[,1] / region[,2]
table[4,5] = min(ratio)
table[4,6] = max(ratio)
View(table)
# latex table
stargazer(table)
k = 3 # which N
eta = c(.5, .2, .1)
table = matrix(0, 4, 6)
colnames(table) = c("eta","beta","gamma","R","Ra","Rb")
# 100% reporting
table[,1] = c(1, eta)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=r,
N=N[k],
hessian = T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[1,2:3] = out$estimate
table[1,4] = table[1,2] / table[1,3]
ratio = region[,1] / region[,2]
table[1,5] = min(ratio)
table[1,6] = max(ratio)
# 50% reporting
rp = rpseudor(r, eta[1])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian = T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[2,2:3] = out$estimate
table[2,4] = table[2,2] / table[2,3]
ratio = region[,1] / region[,2]
table[2,5] = min(ratio)
table[2,6] = max(ratio)
# 20% reporting
rp = rpseudor(r, eta[2])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian=T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[3,2:3] = out$estimate
table[3,4] = table[3,2] / table[3,3]
ratio = region[,1] / region[,2]
table[3,5] = min(ratio)
table[3,6] = max(ratio)
# 10% Reporting
rp = rpseudor(r, eta[3])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian=T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[4,2:3] = out$estimate
table[4,4] = table[4,2] / table[4,3]
ratio = region[,1] / region[,2]
table[4,5] = min(ratio)
table[4,6] = max(ratio)
View(table)
# latex table
stargazer(table)
k = 4 # which N
eta = c(.5, .2, .1)
table = matrix(0, 4, 6)
colnames(table) = c("eta","beta","gamma","R","Ra","Rb")
# 100% reporting
table[,1] = c(1, eta)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=r,
N=N[k],
hessian = T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[1,2:3] = out$estimate
table[1,4] = table[1,2] / table[1,3]
ratio = region[,1] / region[,2]
table[1,5] = min(ratio)
table[1,6] = max(ratio)
# 50% reporting
rp = rpseudor(r, eta[1])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian = T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[2,2:3] = out$estimate
table[2,4] = table[2,2] / table[2,3]
ratio = region[,1] / region[,2]
table[2,5] = min(ratio)
table[2,6] = max(ratio)
# 20% reporting
rp = rpseudor(r, eta[2])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian=T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[3,2:3] = out$estimate
table[3,4] = table[3,2] / table[3,3]
ratio = region[,1] / region[,2]
table[3,5] = min(ratio)
table[3,6] = max(ratio)
# 10% Reporting
rp = rpseudor(r, eta[3])
rp = rp[rp >= min(r)]
rp = rp[rp <= max(r)]
#plot(density(rp), main = NA)
out = nlm(pbla_gsem,
c(2,1),
pbla=pbla_prod,
r=rp,
N=N[k],
hessian=T)
hessian = out$hessian
covariance = solve(hessian)
region = ellipse(covariance, centre = out$estimate, npoints = 1000)
table[4,2:3] = out$estimate
table[4,4] = table[4,2] / table[4,3]
ratio = region[,1] / region[,2]
table[4,5] = min(ratio)
table[4,6] = max(ratio)
# latex table
stargazer(table)
sample(1:3, 1)
library(pblas)
library(ellipse)
N = 500
A = 30
beta = 1.5
gamma = 1
epi = rgsem(beta, gamma, N)
r = (epi[,2])[is.finite(epi[,2])]
epi = rgsem(beta, gamma, N)
r = (epi[,2])[is.finite(epi[,2])]
epi = rgsem(beta, gamma, N)
r = (epi[,2])[is.finite(epi[,2])]
epi = rgsem(beta, gamma, N)
r = (epi[,2])[is.finite(epi[,2])]
epi = rgsem(beta, gamma, N)
r = (epi[,2])[is.finite(epi[,2])]
epi = rgsem(beta, gamma, N)
r = (epi[,2])[is.finite(epi[,2])]
epi = rgsem(beta, gamma, N)
r = (epi[,2])[is.finite(epi[,2])]
r = sort(r)
n = length(r)
u = .5
keep = as.logical(rbinom(n, 1, u))
keep = which(keep, arr.ind = T)
ru = r[keep]
nu = length(ru)
Nu = ceiling(N * nu / n)
rp = rpseudor(ru, nu / n)
a = nlm(pbla_gsem, c(2,1), pbla_prod, r, N, hessian = T)
b = nlm(pbla_gsem, c(2,1), pbla_prod, ru, Nu, hessian = T)
c = nlm(pbla_gsem, c(2,1), pbla_prod, rp, N, hessian = T)
ea = ellipse(solve(a$hessian), centre = a$estimate, npoints = 1000)
eb = ellipse(solve(b$hessian), centre = b$estimate, npoints = 1000)
ec = ellipse(solve(c$hessian), centre = c$estimate, npoints = 1000)
plot(ea)
points(eb, col = 'red')
points(ec, col = 'blue')
plot(eb)
points(ea, col = 'red')
points(ec, col = 'blue')
min(ea[,1]/ea[,2])
c(min(ea[,1]/ea[,2]),max(ea[,1]/ea[,2]))
c(min(eb[,1]/eb[,2]),max(eb[,1]/eb[,2]))
c(min(ec[,1]/ec[,2]),max(ec[,1]/ec[,2]))
a$estimate[1] / a$estimate[2]
b$estimate[1] / b$estimate[2]
c$estimate[1] / c$estimate[2]
# estimates
a$estimate[1] / a$estimate[2]
b$estimate[1] / b$estimate[2]
c$estimate[1] / c$estimate[2]
plot(ea, xlim = c(0,5), ylim = c(0,3))
points(eb, col = 'red')
points(ec, col = 'blue')
plot(ea, xlim = c(0,4), ylim = c(0,2))
points(eb, col = 'red')
points(ec, col = 'blue')
ea = ellipse(solve(a$hessian), centre = a$estimate, npoints = 10000)
eb = ellipse(solve(b$hessian), centre = b$estimate, npoints = 10000)
ec = ellipse(solve(c$hessian), centre = c$estimate, npoints = 10000)
plot(ea, xlim = c(0,4), ylim = c(0,2))
points(eb, col = 'red')
points(ec, col = 'blue')
plot(ea, xlim = c(0,4), ylim = c(0,2), pch = 19)
points(eb, col = 'red', pch = 19)
ea = ellipse(solve(a$hessian), centre = a$estimate, npoints = 1000)
eb = ellipse(solve(b$hessian), centre = b$estimate, npoints = 1000)
ec = ellipse(solve(c$hessian), centre = c$estimate, npoints = 1000)
plot(ea, xlim = c(0,4), ylim = c(0,2), pch = 19)
points(eb, col = 'red', pch = 19)
points(ec, col = 'blue', pch = 19)
legend("bottomright",
legend= c("Full","Scaled","Pseudo"),
col = c("black","red","blue"))
legend("bottomright",
legend= c("Full","Scaled","Pseudo"),
col = c("black","red","blue"),
pch = rep(19,3))
# intervals
c(min(ea[,1]/ea[,2]),max(ea[,1]/ea[,2]))
c(min(eb[,1]/eb[,2]),max(eb[,1]/eb[,2]))
c(min(ec[,1]/ec[,2]),max(ec[,1]/ec[,2]))
acol = c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
acol = c(acol[6], acol[7], acol[4], acol[8], acol[1])
plot(ea, xlim = c(0,4), ylim = c(0,2), pch = 19)
points(eb, col = acol[1], pch = 19)
points(ec, col = acol[3], pch = 19)
plot(ea, xlim = c(0,4), ylim = c(0,2), pch = 19)
points(eb, col = acol[3], pch = 19)
points(ec, col = acol[1], pch = 19)
plot(ea, xlim = c(.25,3.75), ylim = c(.2,1.8), pch = 19)
points(eb, col = acol[3], pch = 19)
points(ec, col = acol[1], pch = 19)
legend("bottomright",
legend= c("Full","Scaled","Pseudo"),
col = c("black","red","blue"),
pch = rep(19,3))
legend("bottomright",
legend= c("Full","Scaled","Pseudo"),
col = c("black",acol[3],acol[1]),
pch = rep(19,3))
plot(ea, xlim = c(.25,3.75), ylim = c(.2,1.8), pch = 19,
xlab = expression(beta), ylab = expression(gamma))
points(eb, col = acol[3], pch = 19)
points(ec, col = acol[1], pch = 19)
legend("bottomright",
legend= c("Full","Scaled","Pseudo"),
col = c("black",acol[3],acol[1]),
pch = rep(19,3))
# which
which.min(ea[,1]/ea[,2])
View(ea)
which.min(eb[,1]/eb[,2])
# which
aa = which.min(ea[,1]/ea[,2])
ab = which.max(ea[,1]/ea[,2])
points(ea[aa,1], ea[aa,2], col = "red")
points(c(ea[aa,1], ea[aa,2]), col = "red")
points(c(ea[aa,1], ea[aa,2]), col = "red", pch = 19)
points(ea[aa,1], ea[aa,2], col = "red", pch = 19)
points(ea[aa,1], ea[aa,2], col = "red", pch = acol[4])
points(ea[aa,1], ea[aa,2], col = "red", pch = acol[4])
plot(ea, xlim = c(.25,3.75), ylim = c(.2,1.8), pch = 19,
xlab = expression(beta), ylab = expression(gamma))
points(eb, col = acol[3], pch = 19)
points(ec, col = acol[1], pch = 19)
legend("bottomright",
legend= c("Full","Scaled","Pseudo"),
col = c("black",acol[3],acol[1]),
pch = rep(19,3))
# which
aa = which.min(ea[,1]/ea[,2])
ab = which.max(ea[,1]/ea[,2])
points(ea[aa,1], ea[aa,2], col = "red", pch = acol[4])
points(ea[aa,1], ea[aa,2], col = acol[4], pch = 19)
plot(ea, xlim = c(.25,3.75), ylim = c(.2,1.8), pch = 19,
xlab = expression(beta), ylab = expression(gamma))
points(eb, col = acol[3], pch = 19)
points(ec, col = acol[1], pch = 19)
legend("bottomright",
legend= c("Full","Scaled","Pseudo"),
col = c("black",acol[3],acol[1]),
pch = rep(19,3))
# which
aa = which.min(ea[,1]/ea[,2])
ab = which.max(ea[,1]/ea[,2])
points(ea[aa,1], ea[aa,2], col = acol[4], pch = 19)
points(ea[aa,1], ea[aa,2], col = acol[4], pch = 19, cex = 2)
points(ea[ab,1], ea[ab,2], col = acol[5], pch = 19, cex = 2)
ba = which.min(eb[,1]/eb[,2])
bb = which.max(eb[,1]/eb[,2])
points(eb[ba,1], eb[ba,2], col = acol[4], pch = 19, cex = 2)
points(eb[bb,1], eb[bb,2], col = acol[5], pch = 19, cex = 2)
ca = which.min(ec[,1]/ec[,2])
cb = which.max(ec[,1]/ec[,2])
points(ec[ca,1], ec[ca,2], col = acol[4], pch = 19, cex = 2)
points(ec[cb,1], ec[cb,2], col = acol[5], pch = 19, cex = 2)
plot(ea, xlim = c(.25,3.75), ylim = c(.2,1.8), pch = 19,
xlab = expression(beta), ylab = expression(gamma))
points(eb, col = acol[3], pch = 19)
points(ec, col = acol[1], pch = 19)
legend("bottomright",
legend= c("Full","Scaled","Pseudo","Min","Max"),
col = c("black",acol[3],acol[1],acol[4],acol[5]),
pch = rep(19,5),
lty = rep(1,5))
# estimates
a$estimate[1] / a$estimate[2]
b$estimate[1] / b$estimate[2]
c$estimate[1] / c$estimate[2]
# intervals
c(min(ea[,1]/ea[,2]),max(ea[,1]/ea[,2]))
c(min(eb[,1]/eb[,2]),max(eb[,1]/eb[,2]))
c(min(ec[,1]/ec[,2]),max(ec[,1]/ec[,2]))
# which
aa = which.min(ea[,1]/ea[,2])
ab = which.max(ea[,1]/ea[,2])
points(ea[aa,1], ea[aa,2], col = acol[4], pch = 19, cex = 2)
points(ea[ab,1], ea[ab,2], col = acol[5], pch = 19, cex = 2)
ba = which.min(eb[,1]/eb[,2])
bb = which.max(eb[,1]/eb[,2])
points(eb[ba,1], eb[ba,2], col = acol[4], pch = 19, cex = 2)
points(eb[bb,1], eb[bb,2], col = acol[5], pch = 19, cex = 2)
ca = which.min(ec[,1]/ec[,2])
cb = which.max(ec[,1]/ec[,2])
points(ec[ca,1], ec[ca,2], col = acol[4], pch = 19, cex = 2)
points(ec[cb,1], ec[cb,2], col = acol[5], pch = 19, cex = 2)
getwd()
rlength = function(g){sum(rexp(2, 2 * g / 100))}
x = sapply(rep(1000, 100), rlength)
hist(x)
plot(density(x))
x = sapply(rep(10, 100), rlength)
plot(density(x))
x = sapply(rep(500, 1000), rlength)
plot(density(x))
x = sapply(rep(500, 10000), rlength)
plot(density(x))
x = sapply(rep(250, 10000), rlength)
plot(density(x))
x = sapply(rep(50, 10000), rlength)
plot(density(x))
x = sapply(rep(100, 10000), rlength)
plot(density(x))
50*29
100*29
q()
sessionInfo()
install.packages('dismo')
install.packages('ENMeval')
eq4 <- function(u, v, N){
num <- 100 * N * N * (v - u)
num <- num * (25 * (v + u) + u * v * N)
denom <- u * N + 50
denom <- denom * denom
denom <- denom * (v * N + 50) * (v * N + 50)
return(num / denom)
}
eq4(0,1,1000)
eq4(1,2,1000)
eq4(1,1000,1000)
eq4(0,1,1000)
eq4(1,2,1000)
eq4(2,1000,1000)
x <- eq4(0,1,1000)
y <- eq4(1,2,1000)
z <- eq4(2,1000,1000)
x+y+Z
x+y+z
sqrt
getwd()
ls
setwd("C:/Users/Owner/Dropbox/GitHub/btvoccu")
library(devtools)
devtools::document()
devtools::document()
devtools::install()
library(btvoccu)
?btvoccu
library(devtools)
devtools::document()
devtools::install()
library(btvoccu)
?btvoccu
devtools::document()
devtools::install()
library(btvoccu)
?btvoccu
