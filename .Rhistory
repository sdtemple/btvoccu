inset <- tmap::tm_shape(merged.shape) +
tmap::tm_polygons(col = 'value',
title = value,
breaks = seq(0, 1, .2),
style = 'cont',
palette = palette) +
tmap::tm_grid(lines = F) +
tmap::tm_layout(legend.show = F,
asp = 0)
w <- inset.width
h <- tmaptools::get_asp_ratio(inset) * inset.width
vp <- grid::viewport(x= inset.x,
y= inset.y,
width = w,
height=h,
just=c("right", "bottom")
)
return(list(map=plt, inset=inset, vp=vp))
}
# print maps
image_graph()
for(s in seasons){
for(p in periods){
out <- map_inset(model, x, value, q, shape, cities, sites, s, p,
latmax, latmin, longmax, longmin, palette, inset.x, inset.y, inset.width,
legend.position,title.position, title.size, legend.title.size, legend.text.size)
print(out$map)
print(out$inset, vp=out$vp) # print inset
}
}
dev.off()
# make and save animation
animation <- image_animate(img, fps = fps, optimize = TRUE)
image_write(animation, file)
}
btvoccu_movie_map_inset("figures/AD/movie.gif", 5, final, x, "Occupancy", 0.5,
ontario, cities, phus, 2017, 28:30, latmax = 46)
btvoccu_movie_map_inset <- function(file,
fps,
model,
x,
value,
q,
shape,
cities,
sites,
seasons,
periods,
latmax = 90,
latmin = -90,
longmax = 180,
longmin = -180,
palette = 'Reds',
inset.x = .95,
inset.y = .05,
inset.width = .4,
legend.position = c('left','top'),
title.position  = c('right','top'),
title.size = .8,
legend.title.size = .8,
legend.text.size = .6){
# local function
map_inset <- function(model, x, value, q, shape, cities, sites, season, period,
latmax, latmin, longmax, longmin, palette,
inset.x, inset.y, inset.width, legend.position,
title.position, title.size, legend.title.size, legend.text.size){
# organize data
sigmoids <- btvoccu::posterior_sigmoids(model, x, sites, season, (period - 1):period)
shape@data$site <- sites
arry <- array(NA,
dim = c(length(sites), 2),
dimnames = list(sites,
c('site','value')
)
)
arry[,1] <- sites
idx <- which(names(sigmoids) %in% value, arr.ind = T)
sigmoid <- sigmoids[[idx]]
sigmoid <- btvoccu::subset_4darray(sigmoid, 3, period)
sigmoid <- sigmoid[sites,,,, drop = F] # reorder sites
arry[,2] <- apply(sigmoid,
1:3,
quantile,
probs = q,
na.rm = T
)
# merge shape
merged.shape <- sp::merge(shape, arry, by.x = 'site', by.y = 'site')
merged.shape@data$value <- as.numeric(as.character(merged.shape@data$value))
# zoomed in shape and cities
centroids <- rgeos::gCentroid(merged.shape, byid = T)
merged.shape@data$long <-  centroids@coords[,1]
merged.shape@data$lat <- centroids@coords[,2]
focused.shape <- merged.shape[merged.shape$long > longmin,]
focused.shape <- focused.shape[focused.shape$long < longmax,]
focused.shape <- focused.shape[focused.shape$lat > latmin,]
focused.shape <- focused.shape[focused.shape$lat < latmax,]
cities$long <- sf::st_coordinates(cities)[,1]
cities$lat <- sf::st_coordinates(cities)[,2]
focused.cities <- cities[cities$long > longmin,]
focused.cities <- focused.cities[focused.cities$long < longmax,]
focused.cities <- focused.cities[focused.cities$lat > latmin,]
focused.cities <- focused.cities[focused.cities$lat < latmax,]
# main tmap object
plt <- tmap::tm_shape(focused.shape) +
tmap::tm_polygons(col = 'value',
title = value,
breaks = seq(0, 1, .2),
style = 'cont',
palette = palette) +
tmap::tm_grid(lines = F) +
tmap::tm_layout(title = paste('Epiweek ', period, ', ', season, sep = ''),
title.size = title.size,
title.position = title.position,
legend.position = legend.position,
legend.title.size = legend.title.size,
legend.text.size = legend.text.size,
asp = 0) +
tmap::tm_shape(focused.cities) +
tmap::tm_dots(size = .2,
col = 'black') +
tmap::tm_text('name',
just = 'top',
size = .6)
# inset tmap object
inset <- tmap::tm_shape(merged.shape) +
tmap::tm_polygons(col = 'value',
title = value,
breaks = seq(0, 1, .2),
style = 'cont',
palette = palette) +
tmap::tm_grid(lines = F) +
tmap::tm_layout(legend.show = F,
asp = 0)
w <- inset.width
h <- tmaptools::get_asp_ratio(inset) * inset.width
vp <- grid::viewport(x= inset.x,
y= inset.y,
width = w,
height=h,
just=c("right", "bottom")
)
return(list(map=plt, inset=inset, vp=vp))
}
# print maps
img <- image_graph()
for(s in seasons){
for(p in periods){
out <- map_inset(model, x, value, q, shape, cities, sites, s, p,
latmax, latmin, longmax, longmin, palette, inset.x, inset.y, inset.width,
legend.position,title.position, title.size, legend.title.size, legend.text.size)
print(out$map)
print(out$inset, vp=out$vp) # print inset
}
}
dev.off()
# make and save animation
animation <- image_animate(img, fps = fps, optimize = TRUE)
image_write(animation, file)
}
btvoccu_movie_map_inset("figures/AD/movie.gif", 5, final, x, "Occupancy", 0.5,
ontario, cities, phus, 2017, 28:30, latmax = 46)
warnings()
?image_write
?image_graph
btvoccu_movie_map_inset <- function(file,
fps,
model,
x,
value,
q,
shape,
cities,
sites,
seasons,
periods,
latmax = 90,
latmin = -90,
longmax = 180,
longmin = -180,
palette = 'Reds',
inset.x = .95,
inset.y = .05,
inset.width = .4,
legend.position = c('left','top'),
title.position  = c('right','top'),
title.size = .8,
legend.title.size = .8,
legend.text.size = .6){
# local function
map_inset <- function(model, x, value, q, shape, cities, sites, season, period,
latmax, latmin, longmax, longmin, palette,
inset.x, inset.y, inset.width, legend.position,
title.position, title.size, legend.title.size, legend.text.size){
# organize data
sigmoids <- btvoccu::posterior_sigmoids(model, x, sites, season, (period - 1):period)
shape@data$site <- sites
arry <- array(NA,
dim = c(length(sites), 2),
dimnames = list(sites,
c('site','value')
)
)
arry[,1] <- sites
idx <- which(names(sigmoids) %in% value, arr.ind = T)
sigmoid <- sigmoids[[idx]]
sigmoid <- btvoccu::subset_4darray(sigmoid, 3, period)
sigmoid <- sigmoid[sites,,,, drop = F] # reorder sites
arry[,2] <- apply(sigmoid,
1:3,
quantile,
probs = q,
na.rm = T
)
# merge shape
merged.shape <- sp::merge(shape, arry, by.x = 'site', by.y = 'site')
merged.shape@data$value <- as.numeric(as.character(merged.shape@data$value))
# zoomed in shape and cities
centroids <- rgeos::gCentroid(merged.shape, byid = T)
merged.shape@data$long <-  centroids@coords[,1]
merged.shape@data$lat <- centroids@coords[,2]
focused.shape <- merged.shape[merged.shape$long > longmin,]
focused.shape <- focused.shape[focused.shape$long < longmax,]
focused.shape <- focused.shape[focused.shape$lat > latmin,]
focused.shape <- focused.shape[focused.shape$lat < latmax,]
cities$long <- sf::st_coordinates(cities)[,1]
cities$lat <- sf::st_coordinates(cities)[,2]
focused.cities <- cities[cities$long > longmin,]
focused.cities <- focused.cities[focused.cities$long < longmax,]
focused.cities <- focused.cities[focused.cities$lat > latmin,]
focused.cities <- focused.cities[focused.cities$lat < latmax,]
# main tmap object
plt <- tmap::tm_shape(focused.shape) +
tmap::tm_polygons(col = 'value',
title = value,
breaks = seq(0, 1, .2),
style = 'cont',
palette = palette) +
tmap::tm_grid(lines = F) +
tmap::tm_layout(title = paste('Epiweek ', period, ', ', season, sep = ''),
title.size = title.size,
title.position = title.position,
legend.position = legend.position,
legend.title.size = legend.title.size,
legend.text.size = legend.text.size,
asp = 0) +
tmap::tm_shape(focused.cities) +
tmap::tm_dots(size = .2,
col = 'black') +
tmap::tm_text('name',
just = 'top',
size = .6)
# inset tmap object
inset <- tmap::tm_shape(merged.shape) +
tmap::tm_polygons(col = 'value',
title = value,
breaks = seq(0, 1, .2),
style = 'cont',
palette = palette) +
tmap::tm_grid(lines = F) +
tmap::tm_layout(legend.show = F,
asp = 0)
w <- inset.width
h <- tmaptools::get_asp_ratio(inset) * inset.width
vp <- grid::viewport(x= inset.x,
y= inset.y,
width = w,
height=h,
just=c("right", "bottom")
)
return(list(map=plt, inset=inset, vp=vp))
}
# print maps
img <- image_graph()
for(s in seasons){
for(p in periods){
out <- map_inset(model, x, value, q, shape, cities, sites, s, p,
latmax, latmin, longmax, longmin, palette, inset.x, inset.y, inset.width,
legend.position,title.position, title.size, legend.title.size, legend.text.size)
print(out$map)
print(out$inset, vp=out$vp) # print inset
}
}
dev.off()
# make and save animation
animation <- image_animate(img, fps = fps, optimize = TRUE)
image_write(animation, file)
}
btvoccu_movie_map_inset <- function(file,
fps,
model,
x,
value,
q,
shape,
cities,
sites,
seasons,
periods,
latmax = 90,
latmin = -90,
longmax = 180,
longmin = -180,
palette = 'Reds',
inset.x = .95,
inset.y = .05,
inset.width = .4,
legend.position = c('left','top'),
title.position  = c('right','top'),
title.size = .8,
legend.title.size = .8,
legend.text.size = .6){
# local function
map_inset <- function(model, x, value, q, shape, cities, sites, season, period,
latmax, latmin, longmax, longmin, palette,
inset.x, inset.y, inset.width, legend.position,
title.position, title.size, legend.title.size, legend.text.size){
# organize data
sigmoids <- btvoccu::posterior_sigmoids(model, x, sites, season, (period - 1):period)
shape@data$site <- sites
arry <- array(NA,
dim = c(length(sites), 2),
dimnames = list(sites,
c('site','value')
)
)
arry[,1] <- sites
idx <- which(names(sigmoids) %in% value, arr.ind = T)
sigmoid <- sigmoids[[idx]]
sigmoid <- btvoccu::subset_4darray(sigmoid, 3, period)
sigmoid <- sigmoid[sites,,,, drop = F] # reorder sites
arry[,2] <- apply(sigmoid,
1:3,
quantile,
probs = q,
na.rm = T
)
# merge shape
merged.shape <- sp::merge(shape, arry, by.x = 'site', by.y = 'site')
merged.shape@data$value <- as.numeric(as.character(merged.shape@data$value))
# zoomed in shape and cities
centroids <- rgeos::gCentroid(merged.shape, byid = T)
merged.shape@data$long <-  centroids@coords[,1]
merged.shape@data$lat <- centroids@coords[,2]
focused.shape <- merged.shape[merged.shape$long > longmin,]
focused.shape <- focused.shape[focused.shape$long < longmax,]
focused.shape <- focused.shape[focused.shape$lat > latmin,]
focused.shape <- focused.shape[focused.shape$lat < latmax,]
cities$long <- sf::st_coordinates(cities)[,1]
cities$lat <- sf::st_coordinates(cities)[,2]
focused.cities <- cities[cities$long > longmin,]
focused.cities <- focused.cities[focused.cities$long < longmax,]
focused.cities <- focused.cities[focused.cities$lat > latmin,]
focused.cities <- focused.cities[focused.cities$lat < latmax,]
# main tmap object
plt <- tmap::tm_shape(focused.shape) +
tmap::tm_polygons(col = 'value',
title = value,
breaks = seq(0, 1, .2),
style = 'cont',
palette = palette) +
tmap::tm_grid(lines = F) +
tmap::tm_layout(title = paste('Epiweek ', period, ', ', season, sep = ''),
title.size = title.size,
title.position = title.position,
legend.position = legend.position,
legend.title.size = legend.title.size,
legend.text.size = legend.text.size,
asp = 0) +
tmap::tm_shape(focused.cities) +
tmap::tm_dots(size = .2,
col = 'black') +
tmap::tm_text('name',
just = 'top',
size = .6)
# inset tmap object
inset <- tmap::tm_shape(merged.shape) +
tmap::tm_polygons(col = 'value',
title = value,
breaks = seq(0, 1, .2),
style = 'cont',
palette = palette) +
tmap::tm_grid(lines = F) +
tmap::tm_layout(legend.show = F,
asp = 0)
w <- inset.width
h <- tmaptools::get_asp_ratio(inset) * inset.width
vp <- grid::viewport(x= inset.x,
y= inset.y,
width = w,
height=h,
just=c("right", "bottom")
)
return(list(map=plt, inset=inset, vp=vp))
}
# print maps
img <- image_graph()
for(s in seasons){
for(p in periods){
out <- map_inset(model, x, value, q, shape, cities, sites, s, p,
latmax, latmin, longmax, longmin, palette, inset.x, inset.y, inset.width,
legend.position,title.position, title.size, legend.title.size, legend.text.size)
print(out$map)
print(out$inset, vp=out$vp) # print inset
}
}
dev.off()
print(img)
# make and save animation
animation <- image_animate(img, fps = fps, optimize = TRUE)
image_write(animation, file)
}
btvoccu_movie_map_inset("figures/AD/movie.gif", 5, final, x, "Occupancy", 0.5,
ontario, cities, phus, 2017, 29:30, latmax = 46)
btvoccu_map_inset("figures/AD/maps/movie/AD-2017-30-occu-inset.png",
final, x, "Occupancy", 0.5,
ontario, cities, phus, 2017, 30,
latmax = 46)
btvoccu_map_inset("figures/AD/maps/occumovie/AD-2017-30-occu-inset.png",
final, x, "Occupancy", 0.5,
ontario, cities, phus, 2017, 29,
latmax = 46)
btvoccu_map_inset("figures/AD/maps/detmovie/AD-2017-30-det-inset.png",
final, x, "Detection", 0.5,
ontario, cities, phus, 2017, 30,
latmax = 46)
btvoccu_map_inset("figures/AD/maps/occumovie/AD-2017-30-occu-inset.png",
final, x, "Occupancy", 0.5,
ontario, cities, phus, 2017, 30,
latmax = 46)
btvoccu_map_inset("figures/AD/maps/occumovie/AD-2017-29-occu-inset.png",
final, x, "Occupancy", 0.5,
ontario, cities, phus, 2017, 29,
latmax = 46)
imgs <- list.files("figures/AD/maps/occumovie/", full.names = T)
img_list <- lapply(imgs, image_read)
img_joined <- image_join(img_list)
img_animated <- image_animate(img_joined, fps = 5)
image_write(image = image_animated,
path = "figures/AD/maps/occumovie/occumovie.gif")
image_write(image = img_animated,
path = "figures/AD/maps/occumovie/occumovie.gif")
img_animated <- image_animate(img_joined, fps = 0.1)
img_animated <- image_animate(img_joined, fps = 1)
img_animated <- image_animate(img_joined, fps = 1/100)
img_animated <- image_animate(img_joined, fps = 1)
image_write(image = img_animated,
path = "figures/AD/maps/occumovie/occumovie.gif")
for(p in 25:34){
btvoccu_movie_map_inset(paste("figures/AD/occumovie/frame", p, ".png", sep = ""),
final, x, "Occupancy", 0.5,
ontario, cities, phus, 2017, 29:30, latmax = 46)
}
for(p in 25:34){
btvoccu_movie_map_inset(paste("figures/AD/occumovie/frame", p, ".png", sep = ""),
final, x, "Occupancy", 0.5, ontario, cities, phus,
2017, 30, latmax = 46)
}
for(p in 25:34){
btvoccu_map_inset(paste("figures/AD/occumovie/frame", p, ".png", sep = ""),
final, x, "Occupancy", 0.5, ontario, cities, phus,
2017, 30, latmax = 46)
}
for(p in 25:34){
btvoccu_map_inset(paste("figures/AD/maps/occumovie/frame", p, ".png", sep = ""),
final, x, "Occupancy", 0.5, ontario, cities, phus,
2017, 30, latmax = 46)
}
for(p in 25:34){
btvoccu_map_inset(paste("figures/AD/maps/occumovie/frame", p, ".png", sep = ""),
final, x, "Occupancy", 0.5, ontario, cities, phus,
2017, p, latmax = 46)
}
imgs <- list.files("figures/AD/maps/occumovie/", full.names = T)
img_list <- lapply(imgs, image_read)
img_joined <- image_join(img_list)
img_animated <- image_animate(img_joined, fps = 1)
image_write(image = img_animated,
path = "figures/AD/maps/occumovie/occumovie.gif")
# covariate movie
for(p in 25:34){
covariate_map_inset(paste("figures/Covariates/maps/tempmovie/frame", p, ".png", sep = ""),
x, "meantemp.wk", ontario, cities, phus,
2017, p, "Mean Temperature",
latmax= 46)
}
imgs <- list.files("figures/Covariates/maps/tempmovie/", full.names = T)
img_list <- lapply(imgs, image_read)
img_joined <- image_join(img_list)
img_animated <- image_animate(img_joined, fps = 1)
image_write(image = img_animated,
path = "figures/Covariates/maps/tempmovie/tempmovie.gif")
# detection movie
for(p in 25:34){
btvoccu_map_inset(paste("figures/AD/maps/detmovie/frame", p, ".png", sep = ""),
final, x, "Detection", 0.5, ontario, cities, phus,
2017, p, latmax = 46)
}
imgs <- list.files("figures/AD/maps/detmovie/", full.names = T)
img_list <- lapply(imgs, image_read)
img_joined <- image_join(img_list)
img_animated <- image_animate(img_joined, fps = 1)
image_write(image = img_animated,
path = "figures/AD/maps/detmovie/detmovie.gif")
getwd()
setwd("C:/Users/Owner/Dropbox/GitHub/btvoccu/R")
setwd("C:/Users/Owner/Dropbox/GitHub/btvoccu")
library(devtools)
devtools::document()
devtools::install()
library(btvoccu)
?btvoccu
