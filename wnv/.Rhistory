return(
plt +
ggplot2::geom_line() +
ggplot2::geom_point(size = 1, show.legend = F) +
ggplot2::theme_classic(base_size = font.size) +
ggplot2::theme(legend.key.height = unit(0, "mm"), legend.key.width = unit(1, "mm")) +
ggplot2::labs(x = xaxis, y = value, colour = legendtitle) +
ggplot2::scale_y_continuous(limits = c(0, 1)) # robust to splining
)
}
} else{
if(ribbons){
return(
plt +
ggplot2::geom_line() +
ggplot2::geom_ribbon(ggplot2::aes(ymin = Lower, ymax = Upper), alpha = .1, linetype = 2, show.legend = F) +
ggplot2::theme_classic(base_size = font.size) +
ggplot2::theme(legend.key.height = unit(0, "mm"), legend.key.width = unit(1, "mm")) +
ggplot2::labs(x = xaxis, y = value, colour = legendtitle) +
ggplot2::scale_y_continuous(limits = c(0, 1)) # robust to splining
)
} else{
return(
plt +
ggplot2::geom_line() +
ggplot2::theme_classic(base_size = font.size) +
ggplot2::theme(legend.key.height = unit(0, "mm"), legend.key.width = unit(1, "mm")) +
ggplot2::labs(x = xaxis, y = value, colour = legendtitle) +
ggplot2::scale_y_continuous(limits = c(0, 1)) # robust to splining
)
}
}
}
# smoothed
a <- plot_btvoccu(final, x, sites, season, periods,
value = "Occupancy",
burnin = 1/6,
spline = T)
b <- plot_btvoccu(final, x, sites, season, periods,
value = "Detection",
burnin = 1/6,
spline = T)
c <- plot_btvoccu(final, x, sites, season, periods,
value = "Presence",
burnin = 1/6,
spline = T)
gr <- arrangeGrob(a, b, c, nrow = 2)
ggsave("figures/smooth2016v3.png", gr, width = 8.5 - 2 * 1, units = "in")
#' \code{btvoccu} predictions visualized
#'
#' Visualize occupancy, detection, and presence
#' probabilities with uncertainty over time.
#'
#' @param model \code{btvoccu} model object
#' @param x numeric array: covariate array
#' @param sites vector
#' @param season length \code{1} vector
#' @param periods vector
#' @param value "Occupancy", "Detection", or "Presence"
#' @param burnin percent of posterior samples to burn
#' @param thin keep every nth posterior draw
#' @param credible quantiles (length \code{3})
#' @param ndraws number of posterior draws
#' @param ribbons logical: default \code{TRUE} to show uncertainty ribbons
#' @param dots logical: default \code{FALSE} to not show actual datapoints
#' @param spline logical: default \code{FALSE} to not fit smoothing splines
#' @param spline.predict logical: default \code{FALSE} to not predict missing values using splines
#' @param nknots see \code{smooth.spline()}
#' @param xaxis character: x-axis label
#' @param legendtile character: legend label
#' @param font.size see \code{theme_classic()}
#' @param legend.key.width see \code{theme()}
#' @param legend.key.height see \code{theme()}
#'
#' @return \code{ggplot} object
#'
#' @examples
#' plot_btvoccu(mdl, x, c("TOR", "YRK", "PEE"), 2005, 20:40)
#' plot_btvoccu(mdl, x, c("TOR", "YRK", "PEE"), 2005, 20:40, spline = T)
#' plot_btvoccu(mdl, x, c("TOR", "YRK", "PEE", "THB", "ALG", "OTT"), 2005, 20:40, spline = T)
#' plot_btvoccu(mdl, x, c("TOR", "YRK", "PEE"), 2005, 20:40, "Detection")
#' plot_btvoccu(mdl, x, c("TOR", "YRK", "PEE"), 2005, 20:40, "Presence")
#'
#' @export
plot_btvoccu <- function(model,
x,
sites,
season,
periods,
value = "Occupancy",
burnin = .5,
thin = 1,
credible = c(.025,.5,.975),
ndraws = 200,
ribbons = TRUE,
dots = FALSE,
spline = FALSE,
spline.predict = FALSE,
nknots = 5,
xaxis = "Period",
legendtitle = "Site",
font.size = 8,
legend.key.width = 2,
legend.key.height = 0){
df <- btvoccu_predict(model,
x,
sites,
season,
periods,
value,
burnin,
thin,
credible,
ndraws,
spline,
spline.predict,
nknots)
# plotting
plt <- ggplot2::ggplot(df, ggplot2::aes(Period, Middle, colour = factor(Site), fill = factor(Site)))
if(dots){
if(ribbons){
return(
plt +
ggplot2::geom_line() +
ggplot2::geom_point(size = 1, show.legend = F) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = Lower, ymax = Upper), alpha = .1, linetype = 2, show.legend = F) +
ggplot2::theme_classic(base_size = font.size) +
ggplot2::theme(legend.key.height = unit(legend.key.height, "mm"),
legend.key.width = unit(legend.key.width, "mm")) +
ggplot2::labs(x = xaxis, y = value, colour = legendtitle) +
ggplot2::scale_y_continuous(limits = c(0, 1)) # robust to splining
)
} else{
return(
plt +
ggplot2::geom_line() +
ggplot2::geom_point(size = 1, show.legend = F) +
ggplot2::theme_classic(base_size = font.size) +
ggplot2::theme(legend.key.height = unit(legend.key.height, "mm"),
legend.key.width = unit(legend.key.width, "mm")) +
ggplot2::labs(x = xaxis, y = value, colour = legendtitle) +
ggplot2::scale_y_continuous(limits = c(0, 1)) # robust to splining
)
}
} else{
if(ribbons){
return(
plt +
ggplot2::geom_line() +
ggplot2::geom_ribbon(ggplot2::aes(ymin = Lower, ymax = Upper), alpha = .1, linetype = 2, show.legend = F) +
ggplot2::theme_classic(base_size = font.size) +
ggplot2::theme(legend.key.height = unit(legend.key.height, "mm"),
legend.key.width = unit(legend.key.width, "mm")) +
ggplot2::labs(x = xaxis, y = value, colour = legendtitle) +
ggplot2::scale_y_continuous(limits = c(0, 1)) # robust to splining
)
} else{
return(
plt +
ggplot2::geom_line() +
ggplot2::theme_classic(base_size = font.size) +
ggplot2::theme(legend.key.height = unit(legend.key.height, "mm"),
legend.key.width = unit(legend.key.width, "mm")) +
ggplot2::labs(x = xaxis, y = value, colour = legendtitle) +
ggplot2::scale_y_continuous(limits = c(0, 1)) # robust to splining
)
}
}
}
# not smoothed
a <- plot_btvoccu(final, x, sites, season, periods,
value = "Occupancy",
burnin = 1/6)
b <- plot_btvoccu(final, x, sites, season, periods,
value = "Detection",
burnin = 1/6)
c <- plot_btvoccu(final, x, sites, season, periods,
value = "Presence",
burnin = 1/6)
gr <- arrangeGrob(a, b, c, nrow = 2)
ggsave("figures/rough2016v2.png", gr, width = 8.5 - 2 * 1, units = "in")
# smoothed
a <- plot_btvoccu(final, x, sites, season, periods,
value = "Occupancy",
burnin = 1/6,
spline = T)
b <- plot_btvoccu(final, x, sites, season, periods,
value = "Detection",
burnin = 1/6,
spline = T)
c <- plot_btvoccu(final, x, sites, season, periods,
value = "Presence",
burnin = 1/6,
spline = T)
gr <- arrangeGrob(a, b, c, nrow = 2)
ggsave("figures/smooth2016v2.png", gr, width = 8.5 - 2 * 1, units = "in")
#' Covariate time series plot
#'
#' Visualize covariates over time.
#'
#' @param x numeric array: covariate array
#' @param sites vector
#' @param season length \code{1} vector
#' @param periods vector
#' @param covariate character
#' @param yaxis characer: y-axis label
#' @param xaxis character: x-axis label
#' @param legendtile character: legend label
#' @param font.size see \code{theme_classic()}
#' @param legend.key.width see \code{theme()}
#' @param legend.key.height see \code{theme()}
#'
#' @return \code{ggplot} object
#'
#' @examples
#' plot_covariate(x, c("TOR", "YRK", "PEE"), 2005, 20:40, "popdensity", "Population Density")
#' plot_covariate(x, c("TOR", "YRK", "PEE"), 2005, 20:40, "temperature", "Temperature (Celsius)")
#'
#' @export
plot_covariate <- function(x,
sites,
season,
periods,
covariate,
yaxis,
xaxis = "Period",
legendtitle = "Site",
font.size = 8,
legend.key.width = 2,
legend.key.height = 0){
sites <- sort(sites)
periods <- sort(periods)
x <- subset_4darray(x, 3, periods)
x <- subset_4darray(x, 4, covariate)
mx <- max(x, na.rm = T)
mn <- min(x, na.rm = F)
x <- subset_4darray(x, 1, sites)
x <- subset_4darray(x, 2, season)
n <- 0
df <- data.frame(matrix(NA, ncol = 4, nrow = 0))
colnames(df) <- c("Site","Season","Period","Covariate")
for(i in 1:length(sites)){
for(k in length(periods):1){ # iterate in reverse for weeks
n <- n + 1
df[n,] <- c(sites[i], season, periods[k], x[i,1,k,1])
}
}
df$Covariate <- as.numeric(as.character(df$Covariate))
df$Period <- as.numeric(as.character(df$Period))
# plotting
plt <- ggplot2::ggplot(df, ggplot2::aes(Period, Covariate, colour = factor(Site)))
return(
plt +
ggplot2::geom_line() +
ggplot2::geom_point(size = 1) +
ggplot2::theme_classic(base_size = font.size) +
ggplot2::theme(legend.key.height = unit(legend.key.height, "mm"),
legend.key.width = unit(legend.key.width, "mm")) +
ggplot2::labs(x = xaxis, y = yaxis, colour = legendtitle) +
ggplot2::scale_y_continuous(limits = c(mn - .001, mx + .001))
)
}
# covariates
a <- plot_covariate(x, moresites, season, 20:40, "lag6gini.bird.simpson", "Bird Index (6 week lag)")
b <- plot_covariate(x, moresites, season, 20:40, "lag6meantemp.wk", "Temperature (6 week lag)")
c <- plot_covariate(x, moresites, season, 20:40, "lag2infected.neighbors", "Infected Neighbors (2 week lag)")
d <- plot_covariate(x, moresites, season, 20:40, "lag6sqrt.level.avg.avg", "Water Level (6 week lag)")
gr <- arrangeGrob(b, c, d, a, nrow = 2, ncol = 2)
ggsave("figures/occueffs2016v2.png", gr, width = 8.5 - 2 * 1, units = "in")
# covariates
a <- plot_covariate(x, moresites, season, 20:40, "lag6gini.bird.simpson", "Bird Index (6 week lag)", font.size = 6)
b <- plot_covariate(x, moresites, season, 20:40, "lag6meantemp.wk", "Temperature (6 week lag)", font.size = 6)
c <- plot_covariate(x, moresites, season, 20:40, "lag2infected.neighbors", "Infected Neighbors (2 week lag)", font.size = 6)
d <- plot_covariate(x, moresites, season, 20:40, "lag6sqrt.level.avg.avg", "Water Level (6 week lag)", font.size = 6)
gr <- arrangeGrob(b, c, d, a, nrow = 2, ncol = 2)
ggsave("figures/occueffs2016v2.png", gr, width = 8.5 - 2 * 1, units = "in")
a <- plot_covariate(x, moresites, season, 20:40, "sqrt.X.surveys", "Survey Count (sqrt)", font.size = 6)
b <- plot_covariate(x, moresites, season, 20:40, "sqrt.Cx.prop", "Percent Culex (sqrt)", font.size = 6)
c <- plot_covariate(x, moresites, season, 20:40, "cbrt.catch.rate", "Catch Rate (cbrt)", font.size = 6)
ggsave("figures/deteffs2016v2.png", gr, width = 8.5 - 2 * 1, units = "in")
gr <- arrangeGrob(a, b, c, nrow = 2, ncol = 2)
ggsave("figures/deteffs2016v2.png", gr, width = 8.5 - 2 * 1, units = "in")
# covariates
a <- plot_covariate(x, moresites, season, 20:40, "lag6gini.bird.simpson", "Bird Index (6 week lag)", font.size = 7)
b <- plot_covariate(x, moresites, season, 20:40, "lag6meantemp.wk", "Temperature (6 week lag)", font.size = 7)
c <- plot_covariate(x, moresites, season, 20:40, "lag2infected.neighbors", "Infected Neighbors (2 week lag)", font.size = 7)
d <- plot_covariate(x, moresites, season, 20:40, "lag6sqrt.level.avg.avg", "Water Level (6 week lag)", font.size = 7)
gr <- arrangeGrob(b, c, d, a, nrow = 2, ncol = 2)
ggsave("figures/occueffs2016v2.png", gr, width = 8.5 - 2 * 1, units = "in")
a <- plot_covariate(x, moresites, season, 20:40, "sqrt.X.surveys", "Survey Count (sqrt)", font.size = 7)
b <- plot_covariate(x, moresites, season, 20:40, "sqrt.Cx.prop", "Percent Culex (sqrt)", font.size = 7)
c <- plot_covariate(x, moresites, season, 20:40, "cbrt.catch.rate", "Catch Rate (cbrt)", font.size = 7)
gr <- arrangeGrob(a, b, c, nrow = 2, ncol = 2)
ggsave("figures/deteffs2016v2.png", gr, width = 8.5 - 2 * 1, units = "in")
library(devtools)
devtools::document()
devtools::install()
plot.trace(m, "betas", 1)
plot_trace(m, "betas", 1)
library(btvoccu)
rm(plot_btvoccu)
rm(plot_covariate)
library(btvoccu)
plot_trace(m, "betas", 1)
plot_trace(m, "betas", 2)
plot_trace(m, "betas", 3)
plot_trace(m, "alphas", 3)
plot_trace(m, "thetas", 1)
library(btvoccu)
set.seed(11232021)
y <- readRDS("data/response-train.rds")
x <- readRDS("data/final-covariates.rds")
siteonly <- readRDS("data/site-covariates.rds")
A <- readRDS("data/adjacency.rds")
y <- apply(y, 1:4, as.numeric)
x <- apply(x, 1:4, as.numeric)
siteonly <- apply(siteonly, 1:4, as.numeric)
library(abind)
siteonly <- apply(siteonly, 1:4, as.numeric)
xx <- abind(x, siteonly)
niter <- 5000
nchains <- 2
print.interval <- 250
sites <- dimnames(x)[[1]]
seasons <- dimnames(y)[[2]]
periods <- 18:44
# spatial effects
arealeffs <- c('sqrt.perc.agri', 'sqrt.perc.urban', 'temp.site', 'freezing.site', 'bird.site', 'level.site')
xx <- append_spatial_effects(xx, arealeffs, A)
occueffs <- c("intercept",
"sqrt.perc.agri",
"sqrt.perc.urban",
"sqrt.wks.meantemp.below.freezing",
"lag6meantemp.wk",
"lag6sqrt.level.avg.avg",
"lag6gini.bird.simpson",
"lag2infected.neighbors")
deteffs <- c("intercept",
"sqrt.X.surveys",
"sqrt.Cx.prop",
"cbrt.catch.rate")
speffs <- paste('sp', 1:5, sep = '')
AG5.2 <- btvoccu(niter,
xx, y,
sites,
seasons,
periods,
occueffs,
deteffs,
speffs,
A,
nchains = nchains,
print.interval = print.interval)
niter <- 2000
AG5.2 <- btvoccu(niter,
xx, y,
sites,
seasons,
periods,
occueffs,
deteffs,
speffs,
A,
nchains = nchains,
print.interval = print.interval)
View(posterior_effects(AG5.2))
plot_trace(AG5.2, "betas", 1)
plot_trace(AG5.2, "betas", 2)
plot_trace(AG5.2, "betas", 3)
plot_trace(AG5.3, "thetas", 1)
plot_trace(AG5.2, "thetas", 1)
plot_trace(AG5.2, "thetas", 2)
plot_trace(AG5.2, "thetas", 3)
AG5.1 <- readRDS("models/AG5.1.rds")
thetas <- AG5.1$thetas
plot(thetas[1,1:2000,1])
plot(thetas[1,1:2000,1], type = 'l')
plot(thetas[1,1:2000,2], type = 'l')
plot(thetas[1,1:2000,3], type = 'l')
plot(thetas[1,1:2000,4], type = 'l')
plot(thetas[1,1:2000,5], type = 'l')
t1 <- AG5.2$thetas
t2 <- AG5.2$thetas
t1 <- AG5.1$thetas
plot(t1[1,1:2000,1], type = 'l')
plot(t1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1')
plot(t1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t2[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t2[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.2')
b2 <- AG5.2$betas
b1 <- AG5.1$thetas
plot(t1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(b1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(b1[1,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(b1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(b1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(b1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(b1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Agricultural Effect',
main = 'Model AG5.1')
plot(b1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect',
main = 'Model AG5.1')
plot(t1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t1[1,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(b1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect',
main = 'Model AG5.1')
plot(t2[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.2')
t2 <- AG5.2$thetas
t1 <- AG5.1$thetas
b2 <- AG5.2$betas
b1 <- AG5.1$betas
plot(t1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(b1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect',
main = 'Model AG5.1')
plot(t2[1,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.2')
plot(b1[1,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect',
main = 'Model AG5.1')
par(mfrow=c(2,2))
plot(t1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 2')
plot(b1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect')
plot(b1[1,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Urban Effect')
par(mfrow=c(2,2))
plot(t1[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 2')
plot(b1[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect')
plot(b1[1,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Urban Effect')
plot(t2[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.2')
plot(t2[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 2')
plot(t2[1,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.2')
plot(t2[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 2')
plot(b2[1,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect')
plot(b2[1,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Urban Effect')
plot(t2[2,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.2')
plot(t2[2,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 2')
plot(b2[2,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect')
plot(b2[2,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Urban Effect')
plot(t1[2,1:2000,1], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 1',
main = 'Model AG5.1')
plot(t1[2,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Spatial Effect 2')
plot(b1[2,1:2000,2], type = 'l',
xlab = 'Index', ylab = 'Agriculture Effect')
plot(b1[2,1:2000,3], type = 'l',
xlab = 'Index', ylab = 'Urban Effect')
saveRDS(AG5.2, "models/AG5.2.small.rds")
